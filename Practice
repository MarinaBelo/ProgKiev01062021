Практика №1
-Создать тест SearchTest который будет использовать класс SearchPage для поиска продукта на сайте
-Создать класс SearchResultPage с которого мы можем получать количество найденных продуктов и получать их названия
-В тесте SearchTest проверить, что после поиска найден только один продукт и сравнить его наименование с текстом который мы искали

https://habr.com/ru/post/134462/

Практика №2
-Описать блок mainMenuBlock методы для перехода в каждый раздел, включая дочерние подэлементы по тексту, например:
-Вызов метода goToMenu("Tablets") должен переходить в соответствующий раздел, а вызов метода goToMenu("Desktops", "PC")
должен переходить по ссылке в подменю.

-Добавить этот блок к GuestSiteBasePage и UserSiteBasePage.

-Добавить тест для проверки этого блока меню, переходим в раздел меню и сверяем количество элементов на странице с тем,
что описано в тесте (с помощью DataProvider), пример данных:

    {"Desktops",            "PC",           0},
    {"Desktops",            "Mac",          1},
    {"Laptops & Notebooks", "Macs",         0},
    {"Laptops & Notebooks", "Windows",      0},
    {"Tablets",             null,           1},
    /* и т.д. */

https://javarush.ru/groups/posts/1944-iskljuchenija-checked-unchecked-i-svoi-sobstvennihe

Практика №3
Дописать тест TopMenuTest таким образом что бы ожидаемые и реальные списки проверялись полностью на соответствие

Практика №4
Добавить новые сценарии на кукумбере(для фича файла loginTest.feature) которые будут
проверять негативные кейсы логина, как в тесте LoginTest
Для не валидного логина сделайте отдельный степ, например:
I enter invalid email а внутри уже генерирование имейла

Практика №5
Описать правый блок навигации по аккаунту AccountNavigationBlock,
так что бы можно было получать текст ссылки по индексу пункта меню.
Пример использования:

AccountPage accountPage = userIndexPage.topMenu.goToAccountPage();
String link = accountPage.accountNavigation.getLinkHref(0);
// Возвращает http://zvisno.com/index.php?route=account/account

Дополнить тест AccountPageTest таким образм, что бы он проверял последовательность ссылок в блоке навигации
(добавьте список в свойсто теста)
Используйте SoftAssert

Практика №6
Сделать рефакторинг теста AddProductToCartTest, сделать следующие изменения:
1/Добавить метод SearchResultPage search(String text) в класс SearchBlock,
-метод должен вводить данные в поиск, нажимать кнопку и возвращать объект страницы,
-использовать этот метод в тесте вместо прямого ввода и клика
2/Использовать метод login(String email, String password) из класса LoginPage
вместо прямого ввода имейла и пароля
3/Изменить метод goToAuthorization в классе GuestTopMenuBlock,
что бы он возвращал LoginPage, внести соответствующие изменения в тест

Практика №7:
Дополнить тест MainMenuTest метод checkMenuMap таким образом что бы заполнялась древоввидная структура данных
Элементы у которых parentId равны 0 должны быть на верхнем уровне, а под ними элементы у которых parentId равен их categoryId
Пример кода с комментариями ниже

@Test
public void checkMenuMap() {
    // structure
    Map<Integer, Category.Item> categoryMap = db.category.getCategories();
    for(Map.Entry<Integer, Category.Item> pair : categoryMap.entrySet()) {
        Category.Item item = pair.getValue();
        System.out.println(pair.getKey() + " - [" + item.getCategoryId() + ", " + item.getParentId() + ", " + item.getName() + "]");
        // if parent id equals 0 -> top level item
        // else put item under other item
    }
    // foreach for top level items
    // go to menu or sub menu
}