Практика №1
-Создать тест SearchTest который будет использовать класс SearchPage для поиска продукта на сайте
-Создать класс SearchResultPage с которого мы можем получать количество найденных продуктов и получать их названия
-В тесте SearchTest проверить, что после поиска найден только один продукт и сравнить его наименование с текстом который мы искали

https://habr.com/ru/post/134462/

Практика №2
-Описать блок mainMenuBlock методы для перехода в каждый раздел, включая дочерние подэлементы по тексту, например:
-Вызов метода goToMenu("Tablets") должен переходить в соответствующий раздел, а вызов метода goToMenu("Desktops", "PC")
должен переходить по ссылке в подменю.

-Добавить этот блок к GuestSiteBasePage и UserSiteBasePage.

-Добавить тест для проверки этого блока меню, переходим в раздел меню и сверяем количество элементов на странице с тем,
что описано в тесте (с помощью DataProvider), пример данных:

    {"Desktops",            "PC",           0},
    {"Desktops",            "Mac",          1},
    {"Laptops & Notebooks", "Macs",         0},
    {"Laptops & Notebooks", "Windows",      0},
    {"Tablets",             null,           1},
    /* и т.д. */

https://javarush.ru/groups/posts/1944-iskljuchenija-checked-unchecked-i-svoi-sobstvennihe

Практика №3
Дописать тест TopMenuTest таким образом что бы ожидаемые и реальные списки проверялись полностью на соответствие

Практика №4
Добавить новые сценарии на кукумбере(для фича файла loginTest.feature) которые будут
проверять негативные кейсы логина, как в тесте LoginTest
Для не валидного логина сделайте отдельный степ, например:
I enter invalid email а внутри уже генерирование имейла